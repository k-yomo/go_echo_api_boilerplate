// Package model contains the types for schema 'go_echo_boilerplate_development'.
package model

// GENERATED BY XO. DO NOT EDIT.

import (
	"context"
	"errors"
	"time"
)

// SmsReconfirmation represents a row from 'sms_reconfirmations'.
type SmsReconfirmation struct {
	ID          uint64    `json:"id" db:"id"`                     // id
	UserID      uint64    `json:"user_id" db:"user_id"`           // user_id
	PhoneNumber string    `json:"phone_number" db:"phone_number"` // phone_number
	AuthCode    string    `json:"auth_code" db:"auth_code"`       // auth_code
	CreatedAt   time.Time `json:"created_at" db:"created_at"`     // created_at
	UpdatedAt   time.Time `json:"updated_at" db:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SmsReconfirmation exists in the database.
func (sr *SmsReconfirmation) Exists() bool {
	return sr._exists
}

// GetSmsReconfirmation gets a SmsReconfirmation by primary key
func GetSmsReconfirmation(ctx context.Context, db Queryer, key uint64) (*SmsReconfirmation, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, phone_number, auth_code, created_at, updated_at ` +
		`FROM sms_reconfirmations ` +
		`WHERE id = ?`

	var sr SmsReconfirmation
	err := db.QueryRowxContext(ctx, sqlstr, key).Scan(&sr.ID, &sr.UserID, &sr.PhoneNumber, &sr.AuthCode, &sr.CreatedAt, &sr.UpdatedAt)
	if err != nil {
		return nil, err
	}
	return &sr, nil
}

// Deleted provides information if the SmsReconfirmation has been deleted from the database.
func (sr *SmsReconfirmation) Deleted() bool {
	return sr._deleted
}

// Insert inserts the SmsReconfirmation to the database.
func (sr *SmsReconfirmation) Insert(ctx context.Context, db Execer) error {
	// if already exist, bail
	if sr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sms_reconfirmations (` +
		`user_id, phone_number, auth_code, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(ctx, sqlstr, sr.UserID, sr.PhoneNumber, sr.AuthCode, sr.CreatedAt, sr.UpdatedAt)
	res, err := db.ExecContext(ctx, sqlstr, sr.UserID, sr.PhoneNumber, sr.AuthCode, sr.CreatedAt, sr.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sr.ID = uint64(id)
	sr._exists = true

	return nil
}

// Update updates the SmsReconfirmation in the database.
func (sr *SmsReconfirmation) Update(ctx context.Context, db Execer) error {
	// if doesn't exist, bail
	if !sr._exists {
		return errors.New("update failed: does not exist")
	}
	// if deleted, bail
	if sr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sms_reconfirmations SET ` +
		`user_id = ?, phone_number = ?, auth_code = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`
	// run query
	XOLog(ctx, sqlstr, sr.UserID, sr.PhoneNumber, sr.AuthCode, sr.CreatedAt, sr.UpdatedAt, sr.ID)
	_, err := db.ExecContext(ctx, sqlstr, sr.UserID, sr.PhoneNumber, sr.AuthCode, sr.CreatedAt, sr.UpdatedAt, sr.ID)
	return err
}

// Save saves the SmsReconfirmation to the database.
func (sr *SmsReconfirmation) Save(ctx context.Context, db Execer) error {
	if sr.Exists() {
		return sr.Update(ctx, db)
	}
	return sr.Insert(ctx, db)
}

// Delete deletes the SmsReconfirmation from the database.
func (sr *SmsReconfirmation) Delete(ctx context.Context, db Execer) error {
	// if doesn't exist, bail
	if !sr._exists {
		return nil
	}

	// if deleted, bail
	if sr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sms_reconfirmations WHERE id = ?`

	// run query
	XOLog(ctx, sqlstr, sr.ID)
	_, err := db.ExecContext(ctx, sqlstr, sr.ID)
	if err != nil {
		return err
	}

	// set deleted
	sr._deleted = true

	return nil
}

// User returns the User associated with the SmsReconfirmation's UserID (user_id).
//
// Generated from foreign key 'sms_reconfirmations_ibfk_1'.
func (sr *SmsReconfirmation) User(ctx context.Context, db Executor) (*User, error) {
	return UserByID(ctx, db, sr.UserID)
}

// SmsReconfirmationByPhoneNumber retrieves a row from 'sms_reconfirmations' as a SmsReconfirmation.
//
// Generated from index 'phone_number'.
func SmsReconfirmationByPhoneNumber(ctx context.Context, db Queryer, phoneNumber string) (*SmsReconfirmation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, phone_number, auth_code, created_at, updated_at ` +
		`FROM sms_reconfirmations ` +
		`WHERE phone_number = ?`

	// run query
	XOLog(ctx, sqlstr, phoneNumber)
	sr := SmsReconfirmation{
		_exists: true,
	}

	err = db.QueryRowxContext(ctx, sqlstr, phoneNumber).Scan(&sr.ID, &sr.UserID, &sr.PhoneNumber, &sr.AuthCode, &sr.CreatedAt, &sr.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &sr, nil
}

// SmsReconfirmationByID retrieves a row from 'sms_reconfirmations' as a SmsReconfirmation.
//
// Generated from index 'sms_reconfirmations_id_pkey'.
func SmsReconfirmationByID(ctx context.Context, db Queryer, id uint64) (*SmsReconfirmation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, phone_number, auth_code, created_at, updated_at ` +
		`FROM sms_reconfirmations ` +
		`WHERE id = ?`

	// run query
	XOLog(ctx, sqlstr, id)
	sr := SmsReconfirmation{
		_exists: true,
	}

	err = db.QueryRowxContext(ctx, sqlstr, id).Scan(&sr.ID, &sr.UserID, &sr.PhoneNumber, &sr.AuthCode, &sr.CreatedAt, &sr.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &sr, nil
}

// SmsReconfirmationByUserID retrieves a row from 'sms_reconfirmations' as a SmsReconfirmation.
//
// Generated from index 'user_id'.
func SmsReconfirmationByUserID(ctx context.Context, db Queryer, userID uint64) (*SmsReconfirmation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, phone_number, auth_code, created_at, updated_at ` +
		`FROM sms_reconfirmations ` +
		`WHERE user_id = ?`

	// run query
	XOLog(ctx, sqlstr, userID)
	sr := SmsReconfirmation{
		_exists: true,
	}

	err = db.QueryRowxContext(ctx, sqlstr, userID).Scan(&sr.ID, &sr.UserID, &sr.PhoneNumber, &sr.AuthCode, &sr.CreatedAt, &sr.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &sr, nil
}
